랜덤 함수
Random rand = new Random();
int randomInt = rand.Next(0, 10);
Console.WriteLine("0~10사이 랜덤 : " + randomInt);
rand.Next(0, 10); -> 0이상, 10 미만의 수가 나온다.
0부터 시작해서 10 - 0 개의 수가 나옴


enum 열거형
public enum thePlaterState {
    idle,
    walk,
    run
} -> namespace 밖, 위에 선언

thePlaterState myStste = thePlaterState.idle;

switch (myStste)
{
case thePlaterState.idle:
	System.Console.WriteLine("I'm idle");
	break;
case thePlaterState.walk:
	System.Console.WriteLine("I'm Walking");
	break;
case thePlaterState.run:
	System.Console.WriteLine("I'm Running");
	break;
}

프로포티
class PlayerName {
	public string name { get; private set; }
}


인터페이스
interface monster {
        void HitFromPlayer(int damage);
}

class DarkMonster : monster {
        int hp = 100;
        public void HitFromPlayer(int damage) {
            hp = hp - damage;
            Console.WriteLine($"Monster : I'm Hit! my Hp is {hp}");
        }
}

class LightMonster : monster {
        int hp = 100;
        public void HitFromPlayer(int damage) {
            hp = hp - (damage / 2);
            Console.WriteLine($"Monster : I'm Hit! but half, my Hp is {hp}");
        }
}

class Player {
        int AttackDamage = 15;

        public void AttackMonster(monster monster) {
            Console.WriteLine("Plater : I'm Attacking Monster!");
            monster.HitFromPlayer(AttackDamage);
        }
}


Player player = new Player();
DarkMonster dark = new DarkMonster();
LightMonster light = new LightMonster();
player.AttackMonster(dark);
player.AttackMonster(light);


버츄얼 virtual
이 클래스를 상속받는 자식들은 이 매소드를 
다시 정의할 수 있다.
override -> virtual로 선언한 값 바꾼다

class DarkMonster {
        int attackValue = 10;

        public virtual void AttackPlayer(Player player) {
            Console.WriteLine("Monster : Player Attack");
            player.HitFromPlayer(attackValue);
        }
}

class Zombie : DarkMonster {
        public override void AttackPlayer(Player player) {
            base.AttackPlayer(player); 
	// 부모가 가지고 있는 매소드를 실행한다.
            Console.WriteLine("Monster : Player Bleesing");
        }
}
자식클래스에서 부모 클래스가 선언한 것울 
재정의할 수 있다.


abstract
부모에서 정의하지 핞고 앞으로 상속받는 자식들이 
이걸 적어야만, 정의해야만 한다고 설정
abstract class DarkMonster {
        int attackValue = 10;
        public abstract void AttackPlayer(Player player);

}

class Zombie : DarkMonster {
        public override void AttackPlayer(Player player) {
            Console.WriteLine("Monster : Player Bleesing");
        }
}


앞으로 상속받을 자식들에게 들만 정해주는 것이기 때문에
DarkMonster dark = new DarkMonster(); 이렇게 
인스턴스화 할 수 없다.

interface, virtual, abstract


콜랙션
리스트 List
List<int> intList = new List<int>() { 6, 2, 4, 6 };
intList[1] = 2
크기를 마음대로 늘렸다 줄였다 할 수 있다.
배열보다 훨씬 편리하지만 배열보다 무겁다.

intList.Add(7); -> 기존 리스트 뒤에 새 값 추가
intList.Remove(4); -> 리스트에 검색하여 제일 먼저 4가 나오는 곳을 삭제
intList.Insert(3, 9); -> 3번째 자리 뒤에 9 추가, 그 뒤는 한 칸씩 밀림
intList.Clear(); -> 배열 초기화, 안의 내용 정리

클래스로 리스트를 만들 수도 있다.

사전 Dictionary
Dictionary<string, string> myDic = new Dictionary<string, string>() {
	{"originKey", "originValue"},
	{"originKey2", "originValue2"},
	//  키값	       밸류값	
}
myDic.Add("addKey", "addValue");
myDic["theKey"] = "theValue";
위의 둘 다 추가하는 방법

Console.WriteLine(myDic["originKey"]);
Console.WriteLine(myDic["originKey2"]);
Console.WriteLine(myDic["theKey"]);

키값으로 밸류값을 검색해서 내보냄





